---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  labels:
    app: elasticsearch
  name: elasticsearch
spec:
  accessModes:
  - ReadWriteMany
  resources:
    requests:
      storage: 5Gi
  storageClassName: dug-storage
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: elasticsearch-initcontainer
  labels:
    app: elasticsearch
data:
  sysctl.sh: |-
    #!/bin/bash

    set -o errexit
    set -o pipefail
    set -o nounset
    if ! [ -x "$(command -v sysctl)" ]; then
      echo 'sysctl not installed. Installing it...'
      distro=$(awk -F= '/^ID=/{print $2}' /etc/os-release | tr -d '"')
      case $distro in
        ol | centos)
          yum install -y procps
          rm -rf /var/cache/yum;;
        ubuntu | debian)
          apt-get update -qq && apt-get install -y --no-install-recommends procps
          rm -rf /var/lib/apt/lists /var/cache/apt/archives;;
      esac
    fi
    sysctl -w vm.max_map_count=262144 && sysctl -w fs.file-max=65536
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: elasticsearch
  name: elasticsearch
spec:
  replicas: 1
  selector:
    matchLabels:
      app: elasticsearch
  template:
    metadata:
      labels:
        app: elasticsearch
    spec:
      initContainers:
        - name: sysctl
          image: bitnami/minideb:buster
          imagePullPolicy: Always
          command:
            - /scripts/sysctl.sh
          securityContext:
            privileged: true
          volumeMounts:
            - name: elasticsearch-initcontainer-volume
              mountPath: /scripts/sysctl.sh
              subPath: sysctl.sh
      containers:
      - image: docker.elastic.co/elasticsearch/elasticsearch:7.6.1
        imagePullPolicy: Always
        name: elasticsearch
        env:
        # ToDo: Check if this is used.  Might need to install a plugin.
        - name: ELASTIC_PASSWORD
          valueFrom:
            secretKeyRef:
              name: dug-secrets
              key: ELASTIC_PASSWORD
        - name: discovery.type
          value: "single-node"
        - name: xpack.security.enabled
          value: 'true'
        volumeMounts:
        - mountPath: /bitnami/elasticsearch/data
          name: elasticsearch
        ports:
          - containerPort: 9200
          - containerPort: 9300
      volumes:
      - name: elasticsearch
        persistentVolumeClaim:
          claimName: elasticsearch
      - name: elasticsearch-initcontainer-volume
        configMap:
          name: elasticsearch-initcontainer
          defaultMode: 0755
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: elasticsearch
  name: elasticsearch
spec:
  ports:
  - name: elasticsearch-p1
    protocol: TCP
    port: 9200
    targetPort: 9200
  - name: elasticsearch-p2
    protocol: TCP
    port: 9300
    targetPort: 9300
  selector:
    app: elasticsearch
  type: ClusterIP
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  labels:
    app: neo4j
  name: neo4j
spec:
  accessModes:
  - ReadWriteMany
  resources:
    requests:
      storage: 5Gi
  storageClassName: dug-storage
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: neo4j
  name: neo4j
spec:
  replicas: 1
  selector:
    matchLabels:
      app: neo4j
  template:
    metadata:
      labels:
        app: neo4j
    spec:
      containers:
      - image: bitnami/neo4j:3.5.14
        imagePullPolicy: Always
        name: neo4j
        env:
        - name: NEO4J_PASSWORD
          valueFrom:
            secretKeyRef:
              name: dug-secrets
              key: NEO4J_PASSWORD
        # - name: NEO4J_PASSWORD
        #   value: "greenlight"
        - name: NEO4J_HOST
          valueFrom:
            configMapKeyRef:
              name: dug-configmap
              key: NEO4J_HOST
        volumeMounts:
        - mountPath: /bitnami
          name: neo4j
        ports:
          - containerPort: 7473
          - containerPort: 7474
          - containerPort: 7687
      volumes:
      - name: neo4j
        persistentVolumeClaim:
          claimName: neo4j
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: neo4j
  name: neo4j
spec:
  ports:
  - name: neo4j-p1
    protocol: TCP
    port: 7473
    targetPort: 7473
  - name: neo4j-p2
    protocol: TCP
    port: 7474
    targetPort: 7474
  - name: neo4j-p3
    protocol: TCP
    port: 7687
    targetPort: 7687
  selector:
    app: neo4j
  type: ClusterIP
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  labels:
    app: redis
  name: redis
spec:
  accessModes:
  - ReadWriteMany
  resources:
    requests:
      storage: 5Gi
  storageClassName: dug-storage
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: redis
  name: redis
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
      - image: bitnami/redis:5.0.8
        imagePullPolicy: Always
        name: redis
        env:
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: dug-secrets
              key: REDIS_PASSWORD
        # - name: REDIS_PASSWORD
        #   value: "redlight"
        - name: REDIS_DISABLE_COMMANDS
          value: "FLUSHDB,FLUSHALL"
        - name: REDIS_PORT
          value: "6379"
        volumeMounts:
        - mountPath: /bitnami/redis/data
          name: redis
        ports:
          - containerPort: 6379
      volumes:
      - name: redis
        persistentVolumeClaim:
          claimName: redis
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: redis
  name: redis
spec:
  ports:
  - name: redis
    protocol: TCP
    port: 6379
    targetPort: 6379
  selector:
    app: redis
  type: ClusterIP
---
# apiVersion: v1
# kind: PersistentVolumeClaim
# metadata:
#   labels:
#     app: dug
#   name: dug
# spec:
#   accessModes:
#   - ReadWriteMany
#   resources:
#     requests:
#       storage: 5Gi
#   storageClassName: dug-storage
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: dug
  name: dug
spec:
  replicas: 1
  selector:
    matchLabels:
      app: dug
  template:
    metadata:
      labels:
        app: dug
    spec:
      containers:
      - image: heliumdatastage/dug:latest
        imagePullPolicy: Always
        name: dug
        env:
        - name: ELASTIC_API_HOST
          valueFrom:
            configMapKeyRef:
              name: dug-configmap
              key: ELASTIC_API_HOST
        - name: ELASTIC_API_PORT
          valueFrom:
            configMapKeyRef:
              name: dug-configmap
              key: ELASTIC_API_PORT
        - name: ELASTIC_USER
          valueFrom:
            configMapKeyRef:
              name: dug-configmap
              key: ELASTIC_USER
        - name: ELASTIC_PASSWORD
          valueFrom:
            secretKeyRef:
              name: dug-secrets
              key: ELASTIC_PASSWORD
        - name: NEO4J_HOST
          valueFrom:
            configMapKeyRef:
              name: dug-configmap
              key: NEO4J_HOST
        - name: NEO4J_PORT
          valueFrom:
            configMapKeyRef:
              name: dug-configmap
              key: NEO4J_PORT
        - name: NEO4J_USER
          valueFrom:
            configMapKeyRef:
              name: dug-configmap
              key: NEO4J_USER
        - name: NEO4J_PASSWORD
          valueFrom:
            secretKeyRef:
              name: dug-secrets
              key: NEO4J_PASSWORD
        - name: REDIS_HOST
          valueFrom:
            configMapKeyRef:
              name: dug-configmap
              key: REDIS_HOST
        - name: REDIS_PORT
          valueFrom:
            configMapKeyRef:
              name: dug-configmap
              key: REDIS_PORT
        - name: REDIS_USER
          valueFrom:
            configMapKeyRef:
              name: dug-configmap
              key: REDIS_USER
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: dug-secrets
              key: REDIS_PASSWORD
        # volumeMounts:
        # - mountPath: /home/dug/dug
        #   name: dug
        ports:
          - containerPort: 5551
        command: ["python"]
        args: ["-m", "dug.api", "--debug"]
      volumes:
      # - name: dug
      #   persistentVolumeClaim:
      #     claimName: dug
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: dug
  name: dug
spec:
  ports:
  - name: dug
    protocol: TCP
    port: 5551
    targetPort: 5551
  selector:
    app: dug
  type: ClusterIP
---
apiVersion: getambassador.io/v2
kind: Mapping
metadata:
  name: dug
  namespace: dug
spec:
  prefix: /dug/
  service: dug
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: dug-search-client
  name: dug-search-client
spec:
  replicas: 1
  selector:
    matchLabels:
      app: dug-search-client
  template:
    metadata:
      labels:
        app: dug-search-client
    spec:
      containers:
      - image: heliumdatastage/dug-search-client:81d7d7d
        imagePullPolicy: Always
        name: dug-search-client
        ports:
          - containerPort: 8080
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: dug-search-client
  name: dug-search-client
spec:
  ports:
  - name: dug-search-client
    protocol: TCP
    port: 80
    targetPort: 8080
  selector:
    app: dug-search-client
  type: ClusterIP
